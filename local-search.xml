<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/10/02/%E5%86%99%E4%BD%9C%E8%A7%84%E8%8C%83%E6%BC%94%E7%A4%BA/"/>
    <url>/2022/10/02/%E5%86%99%E4%BD%9C%E8%A7%84%E8%8C%83%E6%BC%94%E7%A4%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="写作规范演式"><a href="#写作规范演式" class="headerlink" title="写作规范演式"></a>写作规范演式</h1><p>通常来说，一级标题的后面需要添加一些内容，不能直接写完一级标题然后接着写二级标题。</p><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><p>段落</p><p>段落二</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Spring MVC（二）</title>
    <link href="/2022/10/02/Spring-MVC%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <url>/2022/10/02/Spring-MVC%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="Spring-MVC（二）"><a href="#Spring-MVC（二）" class="headerlink" title="Spring MVC（二）"></a>Spring MVC（二）</h1><p><img src="https://cdn.staticaly.com/gh/Pauluooooo/raphic-bed@master/Spring-MVC.62z1lqmf6eo0.webp">​</p><h2 id="Spring-MVC"><a href="#Spring-MVC" class="headerlink" title="Spring MVC"></a>Spring MVC</h2><p>Spring MVC 将请求参数注入到 POJO 对象的操作称为数据绑定，数据类型转换和格式化就发生在数据类型绑定的过程中，类型转换和格式化是密不可分的两个过程，很多带格式的数据必须明确指定格式之后才可以进行类型转换，例如日期类型和数值类型。</p><h3 id="Spring-MVC-提供的自动类型转换"><a href="#Spring-MVC-提供的自动类型转换" class="headerlink" title="Spring MVC 提供的自动类型转换"></a>Spring MVC 提供的自动类型转换</h3><p>HTTP 协议是一种无类型的协议，我们在服务端接收到请求参数等形式的数据时，本质上都是字符串类型，而我们在实体类中需要的类型是非常丰富的。对此，Spring MVC 对基本数据类型提供了自动的类型转换。例如：请求参数传入”100“字符串，实体类中需要的是 <code>Integer</code> 类型，Spring MVC 会自动将字符串转换并注入。</p><h3 id="设置类型转换时的格式"><a href="#设置类型转换时的格式" class="headerlink" title="设置类型转换时的格式"></a>设置类型转换时的格式</h3><ol><li><p>实现功能所需要的环境</p><ol><li><p>所需的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>       <span class="hljs-comment">&lt;!-- SpringMVC --&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-webmvc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.3.10<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>      <br>       <span class="hljs-comment">&lt;!-- 日志 --&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>ch.qos.logback<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>logback-classic<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>      <br>       <span class="hljs-comment">&lt;!-- ServletAPI --&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>javax.servlet-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>      <br>       <span class="hljs-comment">&lt;!-- Spring5 和 Thymeleaf 整合包 --&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.thymeleaf<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>thymeleaf-spring5<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.0.12.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>Spring 配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 自动扫描的包 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.paul.mvc.handler&quot;</span>/&gt;</span><br>      <br><span class="hljs-comment">&lt;!-- 视图解析器 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;thymeleafViewResolver&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.thymeleaf.spring5.view.ThymeleafViewResolver&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;order&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;characterEncoding&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;templateEngine&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.thymeleaf.spring5.SpringTemplateEngine&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;templateResolver&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.thymeleaf.spring5.templateresolver.SpringResourceTemplateResolver&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;prefix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;/WEB-INF/templates/&quot;</span>/&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;suffix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;.html&quot;</span>/&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;characterEncoding&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>/&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;templateMode&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;HTML5&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>      <br><span class="hljs-comment">&lt;!-- mvc 注解驱动 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mvc:annotation-driven</span>/&gt;</span><br><span class="hljs-comment">&lt;!-- 放行静态资源 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mvc:default-servlet-handler</span>/&gt;</span><br><span class="hljs-comment">&lt;!-- 无需走 handler 方法的静态资源 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mvc:view-controller</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/&quot;</span> <span class="hljs-attr">view-name</span>=<span class="hljs-string">&quot;portal&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mvc:view-controller</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/index.html&quot;</span> <span class="hljs-attr">view-name</span>=<span class="hljs-string">&quot;portal&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>web.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 配置 Spring-mvc 分发 Servlet --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>dispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>contextConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>classpath:spring-mvc.xml<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">load-on-startup</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">load-on-startup</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>dispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol></li><li><p>创建一个实体类</p><p> <code>@DateTimeFormat(pattern = &quot;&quot;)</code> 注解用来设置日期类型格式</p><p> <code>@NumberFormat(pattern = &quot;&quot;)</code> 注解用来设置数值类型格式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Product</span> &#123;<br><br>    <span class="hljs-meta">@DateTimeFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;)</span><br>    <span class="hljs-keyword">private</span> Date productDate;<br><br>    <span class="hljs-meta">@NumberFormat(pattern = &quot;###,####,###.####&quot;)</span><br>    <span class="hljs-keyword">private</span> Double productPrice;<br>    ....<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>创建实验页面</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>首页<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">th:action</span>=<span class="hljs-string">&quot;@&#123;/save/product&#125;&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>        生产日期：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;productDate&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1990-1-1 12:12:12&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>        产品价格：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;productPrice&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;111,222,333.444&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span>保存<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>创建 Handler 类处理</p><p> <code>product</code> 用来接收数据的实体类，并按照实体类中要求的数据格式注入</p><p> <code>bindingResult</code> 绑定结果，使用其中的 <code>hasErrors</code> 方法来判断注入是否出错，出错则跳转至 error 视图</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProductHandler</span> &#123;<br>    <span class="hljs-comment">// 导入日志功能</span><br>    <span class="hljs-type">Logger</span> <span class="hljs-variable">logger</span> <span class="hljs-operator">=</span> LoggerFactory.getLogger(<span class="hljs-built_in">this</span>.getClass());<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> product 用来接收数据的实体类，并按照实体类中要求的数据格式注入</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> bindingResult 绑定结果，使用其中的 hasErrors 方法来判断注入是否出错，出错则跳转至 error 视图</span><br><span class="hljs-comment">     * */</span><br>    <span class="hljs-meta">@RequestMapping(value = &quot;/save/product&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">saveProduct</span><span class="hljs-params">(Product product, BindingResult bindingResult)</span> &#123;<br>        <span class="hljs-keyword">if</span> (bindingResult.hasErrors()) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;error&quot;</span>;<br>        &#125;<br>        logger.debug(product.toString());<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;target&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>友好的错误页面</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>系统错误信息页面<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">th:errors</span>=<span class="hljs-string">&quot;$&#123;product.productDate&#125;&quot;</span>&gt;</span>错误信息<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">th:errors</span>=<span class="hljs-string">&quot;$&#123;product.productPrice&#125;&quot;</span>&gt;</span>错误信息<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol><h3 id="自定义类型转换器"><a href="#自定义类型转换器" class="headerlink" title="自定义类型转换器"></a>自定义类型转换器</h3><p>当业务需求中需要 Spring MVC 中没有提供自动转换的数据类型时，需要创建自定义的类型转换器来进行转换</p><ol><li><p>创建实体类</p><p> 地址类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Address</span> &#123;<br>    <span class="hljs-keyword">private</span> String province;<br>    <span class="hljs-keyword">private</span> String city;<br>    <span class="hljs-keyword">private</span> String street;<br>    ......<br>&#125;<br></code></pre></td></tr></table></figure><p> 学生类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br>    <span class="hljs-keyword">private</span> Address address;<br>    ......<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>创建实验页面</p><p> 通过文本框输入约定格式的字符串，转换成所需要的类型</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>自定义类型转换器<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">th:action</span>=<span class="hljs-string">&quot;@&#123;/save/student&#125;&quot;</span>&gt;</span><br>    地址：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;address&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;aaa,bbb,ccc&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span>提交<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>创建自定义类型转换器类</p><p> 需要实现 Spring 的 Converter&lt;S,T&gt; 接口</p><p> 泛型 S：传入的原始类型</p><p> 泛型 T：需要转换成什么类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AddressConverter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Converter</span>&lt;String, Address&gt; &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Address <span class="hljs-title function_">convert</span><span class="hljs-params">(String source)</span> &#123;<br>        <span class="hljs-comment">// 地址按照约定格式拆分赋值</span><br>        String[] split = source.split(<span class="hljs-string">&quot;,&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">province</span> <span class="hljs-operator">=</span> split[<span class="hljs-number">0</span>];<br>        <span class="hljs-type">String</span> <span class="hljs-variable">city</span> <span class="hljs-operator">=</span> split[<span class="hljs-number">1</span>];<br>        <span class="hljs-type">String</span> <span class="hljs-variable">street</span> <span class="hljs-operator">=</span> split[<span class="hljs-number">2</span>];<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Address</span>(province, city, street);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li><li><p>在 Spring 配置文件中注册自定义的拦截器</p><p> a. 配置 <code>FormattingConversionServiceFactoryBean</code> ，在其 <code>converters</code> 属性中将自定义转换器类传入</p><p> b. 在 <code>&lt;mvc:annotation-driven /&gt;</code> 标签中注册 <code>formattingConversionService</code> </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mvc:annotation-driven</span> <span class="hljs-attr">conversion-service</span>=<span class="hljs-string">&quot;formattingConversionService&quot;</span>/&gt;</span><br>   <br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;formattingConversionService&quot;</span> </span><br><span class="hljs-tag">      <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.format.support.FormattingConversionServiceFactoryBean&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;converters&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">set</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.paul.mvc.converter.AddressConverter&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">set</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>......<br></code></pre></td></tr></table></figure></li></ol><h2 id="二、Spring-MVC-数据校验"><a href="#二、Spring-MVC-数据校验" class="headerlink" title="二、Spring MVC 数据校验"></a>二、Spring MVC 数据校验</h2><p>在 Web 应用三层框架中，表述层负责接收浏览器提交的数据，业务逻辑层负责数据的处理。为了能够正确处理，根据业务的不同可能需要我们在表述层对数据进行检查，将错误数据隔绝在业务逻辑层之外。</p><p>JSR 303 是 Java 为 Bean 数据合法性校验提供的标准框架，它包含在 JavaEE 6.0 标准中，其通过在 Bean 属性上标注类似于 @NotNull、@Max 等标准的注解指定校验规则，并通过标准的验证接口对 Bean 进行验证。</p><p>Spring 4.0 版本已经拥有自己独立的数据校验框架，同时支持 JSR 303 标准的校验框架。可同时调用校验框架完成数据校验工作。在 SpringMVC 中，可直接通过注解驱动 <code>&lt;mvc:annotation-driven/&gt;</code> 的方式进行数据校验。</p><p>配置<code>&lt;mvc:annotation-driven/&gt;</code> 后，Spring MVC 会默认装配好一个 <code>LocalValidatorFactoryBean</code>，通过在处理方法的入参上标注 <code>@Validated</code> 注解即可让 Spring MVC 在完成数据绑定后执行数据校验的工作。</p><h3 id="1-Spring-MVC-数据校验流程"><a href="#1-Spring-MVC-数据校验流程" class="headerlink" title="1. Spring MVC 数据校验流程"></a>1. Spring MVC 数据校验流程</h3><ol><li><p>导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 数据校验依赖包 --&gt;</span><br>        <span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/org.hibernate.validator/hibernate-validator --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.hibernate.validator<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>hibernate-validator<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>6.2.0.Final<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/org.hibernate.validator/hibernate-validator-annotation-processor --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.hibernate.validator<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>hibernate-validator-annotation-processor<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>6.2.0.Final<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>在实体类的成员变量上标记校验的注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">President</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * &lt;code&gt;<span class="hljs-doctag">@Email</span>：成员变量的数据校验为 Email&lt;/code&gt;</span><br><span class="hljs-comment">     * &lt;code&gt;<span class="hljs-doctag">@Size</span>：字符串的长度[6,12]&lt;/code&gt;</span><br><span class="hljs-comment">     * */</span><br>    <span class="hljs-meta">@Email</span><br>    <span class="hljs-meta">@Size(min = 6,max = 12)</span><br>    <span class="hljs-keyword">private</span> String email;<br>    ......<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>在 Handler 方法形参上标记 @Validated 注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PresidentHandler</span> &#123;<br>    <span class="hljs-type">Logger</span> <span class="hljs-variable">logger</span> <span class="hljs-operator">=</span> LoggerFactory.getLogger(<span class="hljs-built_in">this</span>.getClass());<br><br>    <span class="hljs-meta">@RequestMapping(value = &quot;/save/president&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">saveEmail</span><span class="hljs-params">(<span class="hljs-meta">@Validated</span> President president)</span> &#123;<br>        logger.debug(president.getEmail());<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;target&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>优化错误提示页</p><p> a. 在 Handler 方法形参加入 <code>BindingResult</code> ，且实体类参数和 <code>BindingResult</code> 之间不能有任何其他参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(value = &quot;/save/president&quot;)</span><br>   <span class="hljs-keyword">public</span> String <span class="hljs-title function_">saveEmail</span><span class="hljs-params">(<span class="hljs-meta">@Validated</span> President president, BindingResult bindingResult)</span> &#123;<br>       <span class="hljs-keyword">if</span> (bindingResult.hasErrors()) &#123;<br>           <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;error&quot;</span>;<br>       &#125;<br>       logger.debug(president.getEmail());<br>       <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;target&quot;</span>;<br>   &#125;<br></code></pre></td></tr></table></figure><p> b. 配置错误页面</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>系统错误信息页面<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">th:errors</span>=<span class="hljs-string">&quot;$&#123;president.email&#125;&quot;</span>&gt;</span>错误信息<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol><h2 id="三、Spring-MVC-异常映射"><a href="#三、Spring-MVC-异常映射" class="headerlink" title="三、Spring MVC 异常映射"></a>三、Spring MVC 异常映射</h2><p>将异常类型和某个具体的视图关联起来，建立映射关系。</p><ul><li>声明式管理异常：在&#x3D;&#x3D;配置文件&#x3D;&#x3D;或者&#x3D;&#x3D;注解&#x3D;&#x3D;中指定异常类型和视图之间的对应关系</li><li>编程式管理异常：手动在可能出错的地方使用 <code>try...catch...</code> 捕获异常，在手动跳转页面</li></ul><p>声明式异常映射的好处：可以让异常控制和核心业务解耦，整个项目代码风格更加统一简洁，便于团队协作</p><h3 id="基于-XML-配置的异常映射"><a href="#基于-XML-配置的异常映射" class="headerlink" title="基于 XML 配置的异常映射"></a>基于 XML 配置的异常映射</h3><ol><li><p>准备工作</p><p> pom 依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- SpringMVC --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-webmvc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.3.10<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- ServletAPI --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>javax.servlet-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- Spring5 和 Thymeleaf 整合包 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.thymeleaf<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>thymeleaf-spring5<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.0.12.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><p> web.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 配置 Spring-mvc 分发 Servlet --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>dispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>contextConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>classpath:spring-mvc.xml<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">load-on-startup</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">load-on-startup</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>dispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure><p> spring-mvc.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 自动扫描的包 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.paul.mvc.handler&quot;</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!-- 视图解析器 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;thymeleafViewResolver&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.thymeleaf.spring5.view.ThymeleafViewResolver&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;order&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;characterEncoding&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;templateEngine&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.thymeleaf.spring5.SpringTemplateEngine&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;templateResolver&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.thymeleaf.spring5.templateresolver.SpringResourceTemplateResolver&quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;prefix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;/WEB-INF/templates/&quot;</span>/&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;suffix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;.html&quot;</span>/&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;characterEncoding&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>/&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;templateMode&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;HTML5&quot;</span>/&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- mvc 注解驱动 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:annotation-driven</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:default-servlet-handler</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:view-controller</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/&quot;</span> <span class="hljs-attr">view-name</span>=<span class="hljs-string">&quot;portal&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:view-controller</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/index.html&quot;</span> <span class="hljs-attr">view-name</span>=<span class="hljs-string">&quot;portal&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><p> 异常信息展示页面</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>数学异常信息展示页<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    异常对象：[[$&#123;paulException&#125;]]<span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>    异常消息：[[$&#123;paulException.message&#125;]]<br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>XML 配置异常映射</p><p> 配置一个 <code>SimpleMappingExceptionResolver</code> 的 bean 在其 <code>exceptionMappings</code> 属性中配置数学异常，内容中配置跳转的页面</p><p> 通过 <code>exceptionAttribute</code> 可以指定放入请求域中的属性名称，默认为 <code>exception</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 配置异常 --&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;exceptionResolver&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.web.servlet.handler.SimpleMappingExceptionResolver&quot;</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;exceptionMappings&quot;</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">props</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">prop</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;java.lang.ArithmeticException&quot;</span>&gt;</span>error-math<span class="hljs-tag">&lt;/<span class="hljs-name">prop</span>&gt;</span><br>           <span class="hljs-tag">&lt;/<span class="hljs-name">props</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;exceptionAttribute&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;paulException&quot;</span>/&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol><h3 id="异常匹配的规则"><a href="#异常匹配的规则" class="headerlink" title="异常匹配的规则"></a>异常匹配的规则</h3><p>如果在配置文件中发现有多个匹配的异常类型，Spring MVC 会采纳范围上最接近的映射关系（尽量精确匹配）</p><h3 id="基于注解的异常映射"><a href="#基于注解的异常映射" class="headerlink" title="基于注解的异常映射"></a>基于注解的异常映射</h3><ol><li><p>准备工作基本相同，不重复赘述</p></li><li><p>创建一个异常处理的类</p><ul><li><p>使用 <code>@ControllerAdvice</code> 将类标记为异常处理器类</p></li><li><p>使用 <code>@org.springframework.web.bind.annotation.ExceptionHandler()</code> 将方法标记为异常处理方法，括号内填入需要捕获异常的 <code>class</code><br /></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ControllerAdvice</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ExceptionHandler</span> &#123;<br> <span class="hljs-comment">/**</span><br><span class="hljs-comment">  * &lt;code&gt;<span class="hljs-doctag">@org</span>.springframework.web.bind.annotation.ExceptionHandler()&lt;/code&gt;将方法标记为异常处理方法，</span><br><span class="hljs-comment">  * 括号内填入需要捕获异常的 class &lt;br/&gt;</span><br><span class="hljs-comment">  * <span class="hljs-doctag">@param</span> e 捕获的异常</span><br><span class="hljs-comment">  * <span class="hljs-doctag">@param</span> model 模型对象，用来将异常存放进请求域</span><br><span class="hljs-comment">  * */</span><br> <span class="hljs-meta">@org</span>.springframework.web.bind.annotation.ExceptionHandler(NullPointerException.class)<br> <span class="hljs-keyword">public</span> String <span class="hljs-title function_">resolveNullPointerException</span><span class="hljs-params">(Exception e, Model model)</span> &#123;<br>     <span class="hljs-comment">// 将获取到的异常存放到请求域（模型）中</span><br>     model.addAttribute(<span class="hljs-string">&quot;paulException&quot;</span>, e);<br>     <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;error-nullPointer&quot;</span>;<br> &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li></ol><ul><li><strong>同时配置了 XML 和注解时,以注解为准</strong></li></ul><h3 id="区分请求类型给出不同响应"><a href="#区分请求类型给出不同响应" class="headerlink" title="区分请求类型给出不同响应"></a>区分请求类型给出不同响应</h3><p>普通请求和 Ajax 请求两种不同的请求需要的返回类型不同，Ajax 响应的是数据片段，普通请求响应的是视图；所以在异常映射时也有不同，此时需要创建工具类来区分这两种不同的请求。</p><p>判断请求消息头中是否带有 Ajax 独有的特征</p><ul><li>Accept 请求消息头：包含 application&#x2F;json</li><li>X-Requested-With 请求消息头：包含 XMLHttpRequest</li></ul><p>两个条件满足一个即可：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">judge</span><span class="hljs-params">(HttpServletRequest request)</span> &#123;<br><br>    <span class="hljs-type">String</span> <span class="hljs-variable">acceptHeader</span> <span class="hljs-operator">=</span> request.getHeader(<span class="hljs-string">&quot;Accept&quot;</span>);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">xRequestHeader</span> <span class="hljs-operator">=</span> request.getHeader(<span class="hljs-string">&quot;X-Requested-With&quot;</span>);<br><br>    <span class="hljs-keyword">return</span>  (acceptHeader != <span class="hljs-literal">null</span> &amp;&amp; acceptHeader.contains(<span class="hljs-string">&quot;application/json&quot;</span>))<br>            || <br>            (xRequestHeader != <span class="hljs-literal">null</span> &amp;&amp; xRequestHeader.contains(<span class="hljs-string">&quot;XMLHttpRequest&quot;</span>));<br>&#125;<br></code></pre></td></tr></table></figure><p>然后再异常处理类中调用此工具方法，当结果为 <code>true</code> 时返回数据片段传给 Ajax，当为 <code>false</code> 时返回视图页面</p><h2 id="四、文件上传"><a href="#四、文件上传" class="headerlink" title="四、文件上传"></a>四、文件上传</h2><h3 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h3><ol><li><p>基础环境跟之前相同</p></li><li><p>前端页面</p><ol><li><p>需要一个表单，请求方式为 POST</p></li><li><p>请求体编码方式必须是 <code>multipart/form-data</code>（通过 form 标签的 enctype 属性设置）按照二进制文件方式编码</p><ol><li>form 表单的 enctype 属性默认值是 <code>application/x-www-form-urlencoded</code> 按照普通字符方式编码</li></ol></li><li><p>使用 input 标签的 type 属性设置为 file 来生成文件上传框</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">th:action</span>=<span class="hljs-string">&quot;@&#123;/paul/upload&#125;&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span> <span class="hljs-attr">enctype</span>=<span class="hljs-string">&quot;multipart/form-data&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;userName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;张三&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;picture&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span>上传头像<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol></li><li><p>在 pom.xml 中导入 <code>commons-fileupload</code> 依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-fileupload<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-fileupload<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.3.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>在 Spring 配置文件中配置文件上传的专用解析器</p><p> 设置 <code>defaultEncoding</code> 属性，指定传入的普通表单按正常方式解码</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;multipartResolver&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;defaultEncoding&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>创建 Handler 类</p><pre><code class="hljs"> `userName`：接收普通参数举例   `picture`：使用 MultipartFile 类型接收上传的文件&lt;br /&gt;</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> userName:接收普通参数举例</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> picture:使用 MultipartFile 类型接收上传的文件</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> 返回视图</span><br><span class="hljs-comment"> * */</span><br><span class="hljs-meta">@RequestMapping(value = &quot;/paul/upload&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">doUpload</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;userName&quot;)</span> String userName, <span class="hljs-meta">@RequestParam(&quot;picture&quot;)</span> MultipartFile picture)</span> &#123;<br>    logger.debug(<span class="hljs-string">&quot;userName = &quot;</span> + userName);<br>    logger.debug(<span class="hljs-string">&quot;原始文件名：&quot;</span> + picture.getOriginalFilename());<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;target&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><p><img src="https://cdn.staticaly.com/gh/Pauluooooo/raphic-bed@master/image.6k1nnapzg9s0.webp"  />​</p><h3 id="文件上传转存机制"><a href="#文件上传转存机制" class="headerlink" title="文件上传转存机制"></a>文件上传转存机制</h3><p>客户端浏览器通过输入流将文件捕获，通过网络传输至服务器端，服务器端先会把接收到的文件放入缓冲区，在通过输入流的方式将文件读取到内存中转存。</p><p>转存有三种去向：</p><ol><li><p>本地转存</p><p> 转存到服务器上某个目录中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> ServletContext servletContext;<br>   <br><span class="hljs-meta">@RequestMapping(value = &quot;/paul/upload&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">doUpload</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;picture&quot;)</span> MultipartFile picture)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-comment">// 获取原始名字</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">originalFilename</span> <span class="hljs-operator">=</span> picture.getOriginalFilename();<br>    <span class="hljs-comment">// 转存文件</span><br>    <span class="hljs-comment">// 1. 通过虚拟路径自动生成物理路径</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">virtualPath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;/head-picture&quot;</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">realPath</span> <span class="hljs-operator">=</span> servletContext.getRealPath(virtualPath);<br>    <span class="hljs-comment">// 设置文件名，为了避免用户上传重名所覆盖,在拼接扩展名</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">generatedFileName</span> <span class="hljs-operator">=</span> UUID.randomUUID().toString().replace(<span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;&quot;</span>);<br>    <span class="hljs-comment">// 获取扩展名</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">originalFileExtName</span> <span class="hljs-operator">=</span> originalFilename.substring(originalFilename.lastIndexOf(<span class="hljs-string">&quot;.&quot;</span>));<br>    <span class="hljs-comment">// 拼接文件名</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">destFileName</span> <span class="hljs-operator">=</span> generatedFileName + <span class="hljs-string">&quot;&quot;</span> + originalFileExtName;<br>    <span class="hljs-comment">// 拼接文件保存路径（路径/文件名）</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">destFilePath</span> <span class="hljs-operator">=</span> realPath + <span class="hljs-string">&quot;/&quot;</span> + destFileName;<br>    <span class="hljs-comment">// 创建 File 对象</span><br>    <span class="hljs-type">File</span> <span class="hljs-variable">destFile</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(destFilePath);<br>    <span class="hljs-comment">// 转存</span><br>    picture.transferTo(destFile);<br>   <br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;target&quot;</span>;<br>&#125;<br>   <br></code></pre></td></tr></table></figure><p> 缺陷：</p><ul><li>Web 重新部署时通常会清理旧的构建结果，此时用户以前上传的文件会丢失</li><li>项目长时间运行，导致上传文件积累，体积增大，拖慢 Web 服务器的运行速度</li><li>服务器以集群模式运行，文件单存在某一台服务器中，其他服务器没有此文件，导致数据不一致</li></ul></li><li><p>文件服务器（大部分实际情况）</p><p> 使用文件服务器的优势：</p><ul><li><p>不受 Web 应用重新部署的影响</p></li><li><p>不会导致数据不一致</p></li><li><p>对文件读写有专门优化</p></li><li><p>能够动态扩容</p><p>文件服务器类型</p></li><li><p>阿里云 OSS 对象存储服务</p></li><li><p>七牛云</p></li><li><p>自建服务器</p></li></ul></li><li><p>上传至其他模块</p></li></ol><h2 id="五、文件下载"><a href="#五、文件下载" class="headerlink" title="五、文件下载"></a>五、文件下载</h2><p>文件下载只需要 Spring MVC 的基础配置，无需其他。</p><h3 id="初始下载"><a href="#初始下载" class="headerlink" title="初始下载"></a>初始下载</h3><p>浏览器会对不认识的文件尽量在浏览器中打开，但是对于 .zip 压缩包的文件，浏览器会直接调用下载，无需做任何配置‍</p><h3 id="小文件下载"><a href="#小文件下载" class="headerlink" title="小文件下载"></a>小文件下载</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DownLoadHandler</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> ServletContext servletContext;<br><br>    <span class="hljs-meta">@RequestMapping(value = &quot;/do/download&quot;)</span><br>    <span class="hljs-keyword">public</span> ResponseEntity&lt;<span class="hljs-type">byte</span>[]&gt; doDown() &#123;<br>        ResponseEntity&lt;<span class="hljs-type">byte</span>[]&gt; responseEntity = <span class="hljs-literal">null</span>;<br>        <span class="hljs-comment">// 将要下载的文件读取到输入流</span><br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> servletContext.getResourceAsStream(<span class="hljs-string">&quot;head-picture/a.txt&quot;</span>);<br>        <span class="hljs-comment">// 使用输入流将文件读取到一个字节数组</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">byte</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[inputStream.available()];<br>            inputStream.read(buffer);<br>            <span class="hljs-comment">// 封装响应消息头</span><br>            <span class="hljs-type">MultiValueMap</span> <span class="hljs-variable">responseHeaderMap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpHeaders</span>();<br>            responseHeaderMap.add(<span class="hljs-string">&quot;Content-Disposition&quot;</span>,<span class="hljs-string">&quot;attachment;filename=a.txt&quot;</span>);<br>            responseEntity = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResponseEntity</span>&lt;&gt;(buffer, responseHeaderMap, HttpStatus.OK);<br>            <span class="hljs-keyword">return</span> responseEntity;<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">if</span> (inputStream != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    inputStream.close();<br>                &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在此实现的是一个简单的下载功能，可以使用在以下场合：</p><ul><li>零星小文件下载</li><li>将系统内部的数据导出为 Excel、PDF 等格式</li></ul><h2 id="六、其他"><a href="#六、其他" class="headerlink" title="六、其他"></a>六、其他</h2><h3 id="Spring-MVC-配置文件的默认位置"><a href="#Spring-MVC-配置文件的默认位置" class="headerlink" title="Spring MVC 配置文件的默认位置"></a>Spring MVC 配置文件的默认位置</h3><p>Spring MVC 的配置文件可以放到 &#x2F;WEB-INF 目录下</p><p>配置要求：</p><ul><li><p>配置文件存放目录：&#x2F;WEB-INF 目录</p></li><li><p>文件名格式：[servlet-name]-servlet.xml</p><ul><li>servlet-name 部分是在 web.xml 中配置 DispatcherServlet 时，servlet-name 标签的值</li></ul></li><li><p>省略原理的 init-param</p></li></ul><p>为什么不建议</p><p>除 web.xml 是 Tomcat 要求放在 WEB-INF 下，其他配置文件习惯上是放在类路径下。</p><h3 id="请求映射其他方式"><a href="#请求映射其他方式" class="headerlink" title="请求映射其他方式"></a>请求映射其他方式</h3><p>根据请求参数情况映射</p><p>使用 <code>@RequestMapping</code> 注解的 <code>params</code> 参数实现，表达式语法参见下面的例子：</p><p><code>params</code> 参数只负责检验，不负责将参数获取到请求域</p><table><thead><tr><th>需求</th><th>映射方式</th></tr></thead><tbody><tr><td>请求参数中必须包含userName</td><td>@RequestMapping(value &#x3D; “&#x2F;xxx”,<br />params&#x3D;”userName”)</td></tr><tr><td>请求参数中不能包含userName</td><td>@RequestMapping(value &#x3D; “&#x2F;xxx”,<br />params&#x3D;”!userName”)</td></tr><tr><td>请求参数中必须包含userName<br />且值必须为Tom2015</td><td>@RequestMapping(value &#x3D; “&#x2F;xxx”,<br />params&#x3D;”userName&#x3D;Tom2015”)</td></tr><tr><td>请求参数中必须包含userName<br />但值不能为Tom2015</td><td>@RequestMapping(value &#x3D; “&#x2F;xxx”,<br />params&#x3D;”userName&#x3D;!Tom2015”)</td></tr><tr><td>请求参数中必须包含userName<br />且值为Tom2015，<br />同时必须包含userPwd但值不限</td><td>@RequestMapping(value &#x3D; “&#x2F;xxx”,<br />params&#x3D;{“userName&#x3D;Tom2015”,”userPwd”} )</td></tr></tbody></table><p>‍</p><p>根据请求消息头内容映射，只有符合此消息头才走这个 Handler 方法</p><p>使用 <code>@RequestMapping</code> 注解的 <code>headers</code> 参数实现，表达式语法参见下面的例子：</p><table><thead><tr><th>需求</th><th>映射方式</th></tr></thead><tbody><tr><td>根据 Accept-Language:zh-CN,zh;q&#x3D;0.8 映射</td><td>@RequestMapping (<br />value&#x3D;”&#x2F;xxx”,<br />headers&#x3D; “Accept-Language&#x3D;zh-CN,en;q&#x3D;0.8” )</td></tr></tbody></table><p>‍</p><p>Ant 风格通配符</p><ul><li>英文问号：匹配一个字符</li><li>一个星号：匹配路径中的一层</li><li>两个连续星号：匹配路径中的多层</li></ul><h3 id="ModeAttribute-注解"><a href="#ModeAttribute-注解" class="headerlink" title="@ModeAttribute 注解"></a>@ModeAttribute 注解</h3><p>handler 类中，选定一个方法标记 <code>@ModelAttribute</code> 注解。</p><ul><li>效果1：在每个 handler 方法前执行</li><li>效果2：可以将某些数据提前存入请求域</li></ul><p>‍</p>]]></content>
    
    
    <categories>
      
      <category>技术类</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring MVC</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
